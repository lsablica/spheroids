name: Build wheels

on:
  # Trigger on new releases only
  release:
    types: [published]

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: ["3.11"]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Armadillo and OpenMP
          sudo apt-get install -y libarmadillo-dev libomp-dev
          # Also make sure we have an updated pip/setuptools/wheel
          python -m pip install --upgrade pip setuptools wheel cibuildwheel pybind11
          # auditwheel (for manylinux repair)
          python -m pip install auditwheel

      - name: Install build dependencies (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          brew update
          brew install armadillo libomp
          
          export CXXFLAGS="-Xpreprocessor -fopenmp -I/opt/homebrew/opt/libomp/include -I/opt/homebrew/opt/armadillo/include"
          export LDFLAGS="-L/opt/homebrew/opt/libomp/lib -lomp -L/opt/homebrew/opt/armadillo/lib"
          python -m pip install --upgrade pip setuptools wheel cibuildwheel pybind11
          export CIBW_ARCHS="universal2" 
          
      # ---------- WINDOWS DEPENDENCIES ----------
      - name: Install build dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # 1) Clone vcpkg into C:\vcpkg
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg

          # 2) Build vcpkg.exe
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat -disableMetrics

          # 3) Install Armadillo (and any other libs) via vcpkg
          .\vcpkg.exe install armadillo

          # Upgrade pip + install cibuildwheel
          python -m pip install --upgrade pip setuptools wheel cibuildwheel pybind11
          
      - name: Get package version
        id: get-version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(python setup.py --version)" >> $GITHUB_ENV    
 
      - name: Build wheels with cibuildwheel
        shell: bash
        run: |
          case "${{ matrix.os }}" in
            "ubuntu-latest")
              export CIBW_BEFORE_BUILD_LINUX="yum install -y armadillo-devel"
              ;;
            "macOS-latest")
              export MACOSX_DEPLOYMENT_TARGET=14.0
              ;;
            "windows-latest")
              set CXXFLAGS=/std:c++17 /openmp /I"C:\vcpkg\installed\x64-windows\include"
              set LDFLAGS=/LIBPATH:"C:\vcpkg\installed\x64-windows\lib"
              ;;
          esac
          
          export CIBW_SKIP="pp* *i686* *musllinux* *win32*"
          cibuildwheel --output-dir wheelhouse
          
      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
      


      # Test built wheels
    #- name: Test built wheels
    #   run: |
    #     python -m pip install wheelhouse/*.whl 
    #     python -c "import spheroids; print('Package imported successfully!')"
  publish_wheels:
    runs-on: ubuntu-latest
    needs: build_wheels
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Download wheel artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest
          path: dist/

      - name: Download wheel artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: wheels-macOS-latest
          path: dist/

      - name: Download wheel artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows-latest
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
        env:
          TWINE_USERNAME: "__token__"